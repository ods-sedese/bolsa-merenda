# O aluno(a) já é beneficiário
ja_eh_beneficiario <- bolsa_merenda %>%
filter(`Justificativa Sedese` == "O aluno(a) já é beneficiário") %>%
select(`Nome do responsável familiar`, `NIS do responsável familiar`, `CPF do responsável familiar`) %>%
mutate(`NIS do responsável familiar` = as.integer64(`NIS do responsável familiar`),
`NIS do responsável familiar` = as.integer64(substr(`NIS do responsável familiar`, 1, 11)),
`CPF do responsável familiar` = as.integer64(`CPF do responsável familiar`)) %>%
distinct()
# Já é beneficiário junto da lista de quem é beneficiário geral
ja_eh_beneficiario_clean_0 <- ja_eh_beneficiario %>%
inner_join(lista_beneficiarios_geral, by = c("CPF do responsável familiar" = "cpf_oficial")) %>%
mutate(`CPF do responsável familiar` = as.integer64(`CPF do responsável familiar`))
# Já é beneficiários junto da lista de quem é beneficiário geral
ja_eh_beneficiario_clean <- ja_eh_beneficiario %>%
inner_join(lista_beneficiarios_geral, by = c("CPF do responsável familiar" = "cpf_oficial")) %>%
mutate(`CPF do responsável familiar` = as.integer64(`CPF do responsável familiar`))
# Procurar dados de quem não foi encontrado na lista geral de beneficiários
nao_encontrados <- ja_eh_beneficiario %>%
anti_join(lista_beneficiarios_geral, by = c("CPF do responsável familiar" = "cpf_oficial")) %>%
distinct() %>%
mutate(`CPF do responsável familiar` = as.integer64(`CPF do responsável familiar`)) %>%
filter(!is.na(`NIS do responsável familiar`)) %>%
inner_join(cadpes, by = c("NIS do responsável familiar" = "num_nis_pessoa_atual")) %>%
mutate(cpf = if_else(is.na(num_cpf_pessoa), `CPF do responsável familiar`, num_cpf_pessoa)) %>%
select(-`CPF do responsável familiar`) %>%
rename(`CPF do responsável familiar` = cpf,
"nome" = nom_pessoa) %>%
select(`Nome do responsável familiar`,`NIS do responsável familiar`, `CPF do responsável familiar`, nome) %>%
mutate(`CPF do responsável familiar` = as.integer64(`CPF do responsável familiar`))
ja_eh_beneficiario_clean <- ja_eh_beneficiario_clean %>%
bind_rows(nao_encontrados) %>%
distinct() %>%
mutate(`CPF do responsável familiar` = as.integer64(`CPF do responsável familiar`)) %>%
select(-nome)
# Ler e juntar base de dados de pagamento
pagamentos_ext_pobre <- read.xlsx("/home/xedar/Downloads/Relatório Financeiro Gov - Bolsa Merenda_20.11.xlsx")
pagamentos_pobre <- read.xlsx("/home/xedar/Downloads/Relatório Financeiro Gov - Ampliação Bolsa Merenda_20.11.xlsx")
pagamentos_ext_pobre <- pagamentos_ext_pobre %>%
select(CPF, Nome)
pagamentos_pobre <- pagamentos_pobre %>%
select(CPF, Nome)
pagamentos <- pagamentos_ext_pobre %>%
bind_rows(pagamentos_pobre) %>%
distinct() %>%
mutate(CPF = as.integer64(CPF))
##################################
#                                #
#           Aprovados            #
#                                #
##################################
# Olhar os aprovados dentro dos requerimentos de revisão
aprovados <- bolsa_merenda %>%
filter(`Status do pedido` == "Deferido" | `Justificativa Sedese` %in% c("O aluno(a) já é beneficiário", "Inconsistências no CPF do responsável familiar resolvidas")) %>%
select(`CPF do responsável familiar`) %>%
mutate(`CPF do responsável familiar` = as.integer64(`CPF do responsável familiar`)
#`NIS do responsável familiar` = as.integer64(`NIS do responsável familiar`),
#`NIS do responsável familiar` = as.integer64(substr(`NIS do responsável familiar`, 1, 11)),
) %>%
distinct() %>%
inner_join(lista_beneficiarios_geral, by = c("CPF do responsável familiar" = "cpf_oficial"))
# Analisar os aprovados que estão recebendo transferências da Pagseguro
aprovados_recebem <- inner_join(aprovados, pagamentos, by = c("CPF do responsável familiar" = "CPF")) %>%
distinct(`CPF do responsável familiar`)
# Analisar os aprovados que não estão recebendo transferências da Pagseguro
aprovados_n_recebem <- anti_join(aprovados, pagamentos, by = c("CPF do responsável familiar" = "CPF")) %>%
distinct(`CPF do responsável familiar`)
# Olhar os casos que possuem a justificativa 'O aluno(a) já é beneficiário' dentro dos requerimentos de revisão
ja_eh_beneficiario_clean_0 <- ja_eh_beneficiario_clean_0 %>%
bind_rows(nao_encontrados) %>%
distinct()
# 'O aluno(a) já é beneficiário' lista geral
ja_eh_beneficiario_lista_geral <- ja_eh_beneficiario_clean_0 %>%
distinct(`CPF do responsável familiar`)
# 'O aluno(a) já é beneficiário' que recebem
ja_eh_beneficiario_recebem <- inner_join(ja_eh_beneficiario_clean_0, pagamentos, by = c("CPF do responsável familiar" = "CPF")) %>%
distinct(`CPF do responsável familiar`)
# 'O aluno(a) já é beneficiário' que não recebem
ja_eh_beneficiario_n_recebem <- anti_join(ja_eh_beneficiario_clean_0, pagamentos, by = c("CPF do responsável familiar" = "CPF")) %>%
distinct(`CPF do responsável familiar`)
resumo <- ja_eh_beneficiario_recebem %>%
summarise(`Aprovados total (Deferidos e não se aplica)` = nrow(aprovados),
`Aprovados que recebem (Deferidos e não se aplica)` = nrow(aprovados_recebem),
`Aprovados que não recebem (Deferidos e não se aplica)` = nrow(aprovados_n_recebem),
`O aluno(a) já é beneficiário` = nrow(ja_eh_beneficiario_lista_geral),
`O aluno(a) já é beneficiário e recebe` = n(),
`O aluno(a) já é beneficiário e não recebe` = nrow(ja_eh_beneficiario_n_recebem)
) %>%
gather("Grupo", "Número")
View(resumo)
View(bolsa_merenda)
# O aluno(a) já é beneficiário
ja_eh_beneficiario <- bolsa_merenda %>%
filter(is.na(Duplicidade)) %>%
group_by(`CPF do responsável familiar`) %>%
filter(any(`Justificativa Sedese` == "O aluno(a) já é beneficiário") & all(`Status do pedido` == "Indeferido")) %>%
summarise(`Nome do responsável familiar` = first(`Nome do responsável familiar`),
`NIS do responsável familiar` = first(`NIS do responsável familiar`),
`CPF do responsável familiar`= first(`CPF do responsável familiar`))
pobres <- read_sheet("1aQuoMrZErvSUqgk0_XpVmIYIVwKmaDHkquqmFavbQQk")
pobres <- pobres %>%
select(`Status do pedido`,`Justificativa Sedese`,`Nome do responsável familiar`, `NIS do responsável familiar`, `CPF do responsável familiar`) %>%
mutate(`NIS do responsável familiar` = as.integer64(`NIS do responsável familiar`),
`CPF do responsável familiar` = as.integer64(`CPF do responsável familiar`),
Duplicidade = NA)
bolsa_merenda <- inicio_julho %>%
bind_rows(agosto) %>%
bind_rows(atual_setembro) %>%
select(`Status do pedido`,`Justificativa Sedese`,`Nome do responsável familiar`, `NIS do responsável familiar`, `CPF do responsável familiar`, `Duplicidade`) %>%
mutate(`NIS do responsável familiar` = as.integer64(`NIS do responsável familiar`),
`CPF do responsável familiar` = as.integer64(`CPF do responsável familiar`)) %>%
bind_rows(pobres)
# O aluno(a) já é beneficiário
ja_eh_beneficiario <- bolsa_merenda %>%
filter(is.na(Duplicidade)) %>%
group_by(`CPF do responsável familiar`) %>%
filter(any(`Justificativa Sedese` == "O aluno(a) já é beneficiário") & all(`Status do pedido` == "Indeferido")) %>%
summarise(`Nome do responsável familiar` = first(`Nome do responsável familiar`),
`NIS do responsável familiar` = first(`NIS do responsável familiar`),
`CPF do responsável familiar`= first(`CPF do responsável familiar`))
# O aluno(a) já é beneficiário
ja_eh_beneficiario <- bolsa_merenda %>%
#  filter(is.na(Duplicidade)) %>%
#  group_by(`CPF do responsável familiar`) %>%
#  filter(any(`Justificativa Sedese` == "O aluno(a) já é beneficiário") & all(`Status do pedido` == "Indeferido")) %>%
filter(`Justificativa Sedese` == "O aluno(a) já é beneficiário") %>%
summarise(`Nome do responsável familiar` = first(`Nome do responsável familiar`),
`NIS do responsável familiar` = first(`NIS do responsável familiar`),
`CPF do responsável familiar`= first(`CPF do responsável familiar`))
# O aluno(a) já é beneficiário
ja_eh_beneficiario <- bolsa_merenda %>%
#  filter(is.na(Duplicidade)) %>%
#  group_by(`CPF do responsável familiar`) %>%
#  filter(any(`Justificativa Sedese` == "O aluno(a) já é beneficiário") & all(`Status do pedido` == "Indeferido")) %>%
filter(`Justificativa Sedese` == "O aluno(a) já é beneficiário") %>%
#  summarise(`Nome do responsável familiar` = first(`Nome do responsável familiar`),
#            `NIS do responsável familiar` = first(`NIS do responsável familiar`),
#            `CPF do responsável familiar`= first(`CPF do responsável familiar`))
select(`Nome do responsável familiar`, `NIS do responsável familiar`, `CPF do responsável familiar`) %>%
mutate(`NIS do responsável familiar` = as.integer64(`NIS do responsável familiar`),
`NIS do responsável familiar` = as.integer64(substr(`NIS do responsável familiar`, 1, 11)),
`CPF do responsável familiar` = as.integer64(`CPF do responsável familiar`)) %>%
distinct()
bolsa_merenda %>%
count(`Justificativa Sedese` == "O aluno(a) já é beneficiário" & `Status do pedido`)
bolsa_merenda %>%
count(`Justificativa Sedese` & `Status do pedido`)
bolsa_merenda %>%
count(`Justificativa Sedese` == "O aluno(a) já é beneficiário", `Status do pedido`)
# O aluno(a) já é beneficiário
ja_eh_beneficiario <- bolsa_merenda %>%
filter(is.na(Duplicidade)) %>%
group_by(`CPF do responsável familiar`) %>%
filter(any(`Justificativa Sedese` == "O aluno(a) já é beneficiário") & all(`Status do pedido` == "Indeferido")) %>%
#  filter(`Justificativa Sedese` == "O aluno(a) já é beneficiário") %>%
summarise(`Nome do responsável familiar` = first(`Nome do responsável familiar`),
`NIS do responsável familiar` = first(`NIS do responsável familiar`),
`CPF do responsável familiar`= first(`CPF do responsável familiar`))
# Já é beneficiário junto da lista de quem é beneficiário geral
ja_eh_beneficiario_clean_0 <- ja_eh_beneficiario %>%
inner_join(lista_beneficiarios_geral, by = c("CPF do responsável familiar" = "cpf_oficial")) %>%
mutate(`CPF do responsável familiar` = as.integer64(`CPF do responsável familiar`))
# Já é beneficiários junto da lista de quem é beneficiário geral
ja_eh_beneficiario_clean <- ja_eh_beneficiario %>%
inner_join(lista_beneficiarios_geral, by = c("CPF do responsável familiar" = "cpf_oficial")) %>%
mutate(`CPF do responsável familiar` = as.integer64(`CPF do responsável familiar`))
# Procurar dados de quem não foi encontrado na lista geral de beneficiários
nao_encontrados <- ja_eh_beneficiario %>%
anti_join(lista_beneficiarios_geral, by = c("CPF do responsável familiar" = "cpf_oficial")) %>%
distinct() %>%
mutate(`CPF do responsável familiar` = as.integer64(`CPF do responsável familiar`)) %>%
filter(!is.na(`NIS do responsável familiar`)) %>%
inner_join(cadpes, by = c("NIS do responsável familiar" = "num_nis_pessoa_atual")) %>%
mutate(cpf = if_else(is.na(num_cpf_pessoa), `CPF do responsável familiar`, num_cpf_pessoa)) %>%
select(-`CPF do responsável familiar`) %>%
rename(`CPF do responsável familiar` = cpf,
"nome" = nom_pessoa) %>%
select(`Nome do responsável familiar`,`NIS do responsável familiar`, `CPF do responsável familiar`, nome) %>%
mutate(`CPF do responsável familiar` = as.integer64(`CPF do responsável familiar`))
ja_eh_beneficiario_clean <- ja_eh_beneficiario_clean %>%
bind_rows(nao_encontrados) %>%
distinct() %>%
mutate(`CPF do responsável familiar` = as.integer64(`CPF do responsável familiar`)) %>%
select(-nome)
# Ler e juntar base de dados de pagamento
pagamentos_ext_pobre <- read.xlsx("/home/xedar/Downloads/Relatório Financeiro Gov - Bolsa Merenda_20.11.xlsx")
pagamentos_pobre <- read.xlsx("/home/xedar/Downloads/Relatório Financeiro Gov - Ampliação Bolsa Merenda_20.11.xlsx")
pagamentos_ext_pobre <- pagamentos_ext_pobre %>%
select(CPF, Nome)
pagamentos_pobre <- pagamentos_pobre %>%
select(CPF, Nome)
pagamentos <- pagamentos_ext_pobre %>%
bind_rows(pagamentos_pobre) %>%
distinct() %>%
mutate(CPF = as.integer64(CPF))
##################################
#                                #
#           Aprovados            #
#                                #
##################################
# Olhar os aprovados dentro dos requerimentos de revisão
aprovados <- bolsa_merenda %>%
filter(`Status do pedido` == "Deferido" | `Justificativa Sedese` %in% c("O aluno(a) já é beneficiário", "Inconsistências no CPF do responsável familiar resolvidas")) %>%
select(`CPF do responsável familiar`) %>%
mutate(`CPF do responsável familiar` = as.integer64(`CPF do responsável familiar`)
#`NIS do responsável familiar` = as.integer64(`NIS do responsável familiar`),
#`NIS do responsável familiar` = as.integer64(substr(`NIS do responsável familiar`, 1, 11)),
) %>%
distinct() %>%
inner_join(lista_beneficiarios_geral, by = c("CPF do responsável familiar" = "cpf_oficial"))
# Analisar os aprovados que estão recebendo transferências da Pagseguro
aprovados_recebem <- inner_join(aprovados, pagamentos, by = c("CPF do responsável familiar" = "CPF")) %>%
distinct(`CPF do responsável familiar`)
# Analisar os aprovados que não estão recebendo transferências da Pagseguro
aprovados_n_recebem <- anti_join(aprovados, pagamentos, by = c("CPF do responsável familiar" = "CPF")) %>%
distinct(`CPF do responsável familiar`)
# Olhar os casos que possuem a justificativa 'O aluno(a) já é beneficiário' dentro dos requerimentos de revisão
ja_eh_beneficiario_clean_0 <- ja_eh_beneficiario_clean_0 %>%
#  bind_rows(nao_encontrados) %>%
distinct()
# 'O aluno(a) já é beneficiário' lista geral
ja_eh_beneficiario_lista_geral <- ja_eh_beneficiario_clean_0 %>%
distinct(`CPF do responsável familiar`)
# 'O aluno(a) já é beneficiário' que recebem
ja_eh_beneficiario_recebem <- inner_join(ja_eh_beneficiario_clean_0, pagamentos, by = c("CPF do responsável familiar" = "CPF")) %>%
distinct(`CPF do responsável familiar`)
# 'O aluno(a) já é beneficiário' que não recebem
ja_eh_beneficiario_n_recebem <- anti_join(ja_eh_beneficiario_clean_0, pagamentos, by = c("CPF do responsável familiar" = "CPF")) %>%
distinct(`CPF do responsável familiar`)
resumo <- ja_eh_beneficiario_recebem %>%
summarise(`Aprovados total (Deferidos e não se aplica)` = nrow(aprovados),
`Aprovados que recebem (Deferidos e não se aplica)` = nrow(aprovados_recebem),
`Aprovados que não recebem (Deferidos e não se aplica)` = nrow(aprovados_n_recebem),
`O aluno(a) já é beneficiário` = nrow(ja_eh_beneficiario_lista_geral),
`O aluno(a) já é beneficiário e recebe` = n(),
`O aluno(a) já é beneficiário e não recebe` = nrow(ja_eh_beneficiario_n_recebem)
) %>%
gather("Grupo", "Número")
View(resumo)
write.xlsx(resumo, "resumo.xlsx")
View(nao_encontrados)
write.xlsx(nao_encontrados, "não_encontrados.xlsx", asTable = FALSE)
View(pagamentos_pobre)
View(pagamentos_ext_pobre)
# Ler e juntar base de dados de pagamento
pagamentos_ext_pobre <- read.xlsx("/home/xedar/Downloads/Relatório Financeiro Gov - Bolsa Merenda_20.11.xlsx")
View(pagamentos_ext_pobre)
View(lista_beneficiarios_geral)
# Lista de beneficiários
# Lista extremamente pobres
lista_beneficiarios_extremamente_pobres <- read_csv("/home/xedar/Documents/Trabalho/demanda_clientes/[SEDESE] Dados Educacao/lista_beneficiarios_bolsa_merenda/Lista_Completa_Bolsa_Merenda_20 de Novembro.csv")
View(lista_beneficiarios_extremamente_pobres)
install.packages('blogdown')
blogdown::hugo_version()
setwd("/srv/shiny-server/bolsa-merenda")
# Read db
pobre <- read_csv("data/Por_municipio_Nova_Sintese_Alunos_e_familias_pobres_contemplados_pelo_Bolsa_Merenda.csv")
library(tidyverse)
library(openxlsx)
# Read db
pobre <- read_csv("data/Por_municipio_Nova_Sintese_Alunos_e_familias_pobres_contemplados_pelo_Bolsa_Merenda.csv")
ext_pobre <- read_csv("data/Por_municipio_Nova_Sintese_Alunos_e_familias_ext_pobres_contemplados_pelo_Bolsa_Merenda(2).csv")
mg_dados <- read.xlsx("data/mg_dados.xlsx")
ext_pobre <- read_csv("data/Por_municipio_Nova_Sintese_Alunos_e_familias_ext_pobres_contemplados_pelo_Bolsa_Merenda.csv")
mg_dados <- read.xlsx("data/mg_dados.xlsx")
# Clean ext pobre
ext_pobre <- ext_pobre %>%
filter(!is.na(`Código IBGE`))
# Original
munic <- read_csv("data/dados_por_municipio.csv")
# Select variaveis
geral <- ext_pobre %>%
left_join(pobre, by = c("Código IBGE" = "Código.IBGE"), suffix = c("", "_2")) %>%
select(3,1,2, 5, 7, 17, 24, 26, 36, 6, 9, 18, 25, 28, 37, 38, 19, 38) %>%
mutate(across(everything(), ~replace_na(., 0)),
`Valor repassado aos beneficiários` = `Total de dinheiro repassado aos beneficiários da lista atual de extremamente pobres` + total_dinheiro_lista_atual) %>%
select(-c(16, 17))
# Change colnames
col_names <- colnames(munic)
colnames(geral) <- col_names
# Read original data
regional <- read_csv("data/dados_por_regional_sedese.csv")
regional_2 <- geral %>%
group_by(`Diretoria Regional`) %>%
summarise(across(c(3,4, 6,7,9,10,12,13), sum)) %>%
group_by(`Diretoria Regional`) %>%
transmute(`Percentual de alunos extremamente pobres que receberam o benefício` = `Número de alunos extremamente pobres que receberam o benefício` / `Número de alunos extremamente pobres potenciais beneficiários` * 100,
`Percentual de alunos pobres que receberam o benefício` = `Número de alunos pobres que receberam o benefício` / `Número de alunos pobres potenciais beneficiários` * 100,
`Percentual de famílias extremamente pobres que receberam o benefício` = `Número de famílias extremamente pobres que receberam o benefício` / `Número de famílias extremamente pobres potenciais beneficiárias` * 100,
`Percentual de famílias pobres que receberam o benefício` = `Número de famílias pobres que receberam o benefício` / `Número de famílias pobres potenciais beneficiárias` * 100)
View(regional_2)
View(mg_dados)
mg_dados <- read.xlsx("data/mg_dados.xlsx") %>%
select(Código.IBGE, Município)
mg_dados <- read.xlsx("data/mg_dados.xlsx") %>%
select(Código.IBGE, Município) %>%
rename(`Código IBGE` = Código.ibge)
mg_dados <- read.xlsx("data/mg_dados.xlsx") %>%
select(Código.IBGE, Município) %>%
rename(`Código IBGE` = Código.IBGE)
# Select variaveis
geral <- ext_pobre %>%
left_join(pobre, by = c("Código IBGE" = "Código.IBGE"), suffix = c("", "_2")) %>%
select(3,1,2, 5, 7, 17, 24, 26, 36, 6, 9, 18, 25, 28, 37, 38, 19, 38) %>%
mutate(across(everything(), ~replace_na(., 0)),
`Valor repassado aos beneficiários` = `Total de dinheiro repassado aos beneficiários da lista atual de extremamente pobres` + total_dinheiro_lista_atual) %>%
select(-c(16, 17)) %>%
left_join(mg_dados, by = "Código IBGE")
View(geral)
# Select variaveis
geral <- ext_pobre %>%
left_join(pobre, by = c("Código IBGE" = "Código.IBGE"), suffix = c("", "_2")) %>%
select(3,1,2, 5, 7, 17, 24, 26, 36, 6, 9, 18, 25, 28, 37, 38, 19, 38) %>%
mutate(across(everything(), ~replace_na(., 0)),
`Valor repassado aos beneficiários` = `Total de dinheiro repassado aos beneficiários da lista atual de extremamente pobres` + total_dinheiro_lista_atual) %>%
select(-c(16, 17)) %>%
left_join(mg_dados, by = "Código IBGE", suffix = c("", "_2")) %>%
mutate(Município = Município_2) %>%
select(-Município_2)
View(geral)
library(tidyverse)
library(openxlsx)
setwd("/srv/shiny-server/bolsa-merenda")
# Read db
pobre <- read_csv("data/Por_municipio_Nova_Sintese_Alunos_e_familias_pobres_contemplados_pelo_Bolsa_Merenda.csv")
ext_pobre <- read_csv("data/Por_municipio_Nova_Sintese_Alunos_e_familias_ext_pobres_contemplados_pelo_Bolsa_Merenda.csv")
mg_dados <- read.xlsx("data/mg_dados.xlsx") %>%
select(Código.IBGE, Município) %>%
rename(`Código IBGE` = Código.IBGE)
# Clean ext pobre
ext_pobre <- ext_pobre %>%
filter(!is.na(`Código IBGE`))
# Original
munic <- read_csv("data/dados_por_municipio.csv")
# Select variaveis
geral <- ext_pobre %>%
left_join(pobre, by = c("Código IBGE" = "Código.IBGE"), suffix = c("", "_2")) %>%
select(3,1,2, 5, 7, 17, 24, 26, 36, 6, 9, 18, 25, 28, 37, 38, 19, 38) %>%
mutate(across(everything(), ~replace_na(., 0)),
`Valor repassado aos beneficiários` = `Total de dinheiro repassado aos beneficiários da lista atual de extremamente pobres` + total_dinheiro_lista_atual) %>%
select(-c(16, 17)) %>%
left_join(mg_dados, by = "Código IBGE", suffix = c("", "_2")) %>%
mutate(Município = Município_2) %>%
select(-Município_2)
# Change colnames
col_names <- colnames(munic)
colnames(geral) <- col_names
# Read original data
regional <- read_csv("data/dados_por_regional_sedese.csv")
regional_2 <- geral %>%
group_by(`Diretoria Regional`) %>%
summarise(across(c(3,4, 6,7,9,10,12,13), sum)) %>%
group_by(`Diretoria Regional`) %>%
transmute(`Percentual de alunos extremamente pobres que receberam o benefício` = `Número de alunos extremamente pobres que receberam o benefício` / `Número de alunos extremamente pobres potenciais beneficiários` * 100,
`Percentual de alunos pobres que receberam o benefício` = `Número de alunos pobres que receberam o benefício` / `Número de alunos pobres potenciais beneficiários` * 100,
`Percentual de famílias extremamente pobres que receberam o benefício` = `Número de famílias extremamente pobres que receberam o benefício` / `Número de famílias extremamente pobres potenciais beneficiárias` * 100,
`Percentual de famílias pobres que receberam o benefício` = `Número de famílias pobres que receberam o benefício` / `Número de famílias pobres potenciais beneficiárias` * 100)
write_csv(geral, "data/dados_por_municipio.csv")
write_csv(regional_2, "data/dados_por_regional_sedese.csv")
## Read db
inicio_julho <- read_sheet("1kPIUC243yhW8-ZEIXyKK4BqkLQTixRDVlzKoPA4ayNc")
library(data.table)
library(gmailr)
library(googlesheets4)
library(tidyverse)
library(htmltools)
library(knitr)
library(openxlsx)
## Read db
inicio_julho <- read_sheet("1kPIUC243yhW8-ZEIXyKK4BqkLQTixRDVlzKoPA4ayNc")
agosto <- read_sheet("1u8hmNVmKTN3NLboJFCFQUxNBQm57QCIQVBlFIkyedB0")
atual_setembro <- read_sheet("1YSdaqkeJhf4H1KVK5znxDTkCVfoQnvQLbWwqha6jeZw")
bolsa_merenda <- inicio_julho %>%
bind_rows(agosto) %>%
bind_rows(atual_setembro)
bolsa_merenda_2 <- bolsa_merenda %>%
mutate(duplicados_var = paste(`Nome do responsável familiar`, `Nome do aluno matriculado`),
duplicados = duplicated(duplicados_var),
duplicados = ifelse(duplicados == TRUE, "Sim", NA))
View(bolsa_merenda_2)
bolsa_merenda_2 <- bolsa_merenda %>%
mutate(duplicados_var = paste(`Nome do responsável familiar`, `Nome do aluno matriculado`),
duplicados = duplicated(duplicados_var),
duplicados = ifelse(duplicados == TRUE, "Sim", NA),
diferencas = if_else(duplicados != Duplicidade, "sim", NA))
bolsa_merenda_2 <- bolsa_merenda %>%
mutate(duplicados_var = paste(`Nome do responsável familiar`, `Nome do aluno matriculado`),
duplicados = duplicated(duplicados_var),
duplicados = ifelse(duplicados == TRUE, "Sim", NA),
diferencas = if_else(duplicados != Duplicidade, "sim", NA))
bolsa_merenda_2 <- bolsa_merenda %>%
mutate(duplicados_var = paste(`Nome do responsável familiar`, `Nome do aluno matriculado`),
duplicados = duplicated(duplicados_var),
duplicados = ifelse(duplicados == TRUE, "Sim", NA),
diferencas = if_else(duplicados == Duplicidade, NA, "Sim"))
bolsa_merenda_2 <- bolsa_merenda %>%
mutate(duplicados_var = paste(`Nome do responsável familiar`, `Nome do aluno matriculado`),
duplicados = duplicated(duplicados_var),
duplicados = ifelse(duplicados == TRUE, "Sim", NA),
diferencas = ifelse(duplicados == Duplicidade, NA, "Sim"))
bolsa_merenda_2 %>%
count(diferencas)
bolsa_merenda_2 %>%
count(duplicados, Duplicidade)
bolsa_merenda_2 <- bolsa_merenda %>%
mutate(duplicados_var = paste(`Nome do responsável familiar`, `Nome do aluno matriculado`),
duplicados = duplicated(duplicados_var),
duplicados = ifelse(duplicados == TRUE, "Sim", NA))
bolsa_merenda_2 %>%
count(duplicados, Duplicidade)
linha <- nrow(inicio_julho)
linha <- nrow(inicio_julho + agosto)
linha <- nrow(inicio_julho) + nrow(agosto)
linha <- nrow(inicio_julho) + nrow(agosto) + 7880
bolsa_merenda[linha:,]
bolsa_merenda[linha:nrow(bolsa_merenda),]
teste <- bolsa_merenda[linha:nrow(bolsa_merenda),]
8660 - 7880
teste <- bolsa_merenda[linha:nrow(bolsa_merenda):(linha:nrow(bolsa_merenda) + 780),]
teste %>%
count(duplicados, Duplicidade)
teste %>%
count(duplicados, Duplicidade)
teste <- bolsa_merenda_2[linha:nrow(bolsa_merenda):(linha:nrow(bolsa_merenda) + 780),]
teste %>%
count(duplicados, Duplicidade)
bolsa_merenda_2 %>%
count(duplicados, Duplicidade)
teste %>%
count(duplicados, Duplicidade)
teste <- bolsa_merenda_2[linha:nrow(bolsa_merenda):,]
teste <- bolsa_merenda_2[linha:nrow(bolsa_merenda):linha:nrow(bolsa_merenda_2),]
teste <- bolsa_merenda_2[:linha:nrow(bolsa_merenda_2),]
teste <- bolsa_merenda_2[linha:nrow(bolsa_merenda_2),]
teste %>%
count(duplicados, Duplicidade)
bolsa_merenda_2 %>%
count(duplicados, Duplicidade)
teste <- bolsa_merenda_2[linha:nrow(bolsa_merenda):(linha:nrow(bolsa_merenda_2) + 780),]
teste <- bolsa_merenda_2[linha:(nrow(bolsa_merenda_2) + 780),]
teste <- bolsa_merenda_2[linha:(nrow(linha) + 780),]
teste <- bolsa_merenda_2[linha:linha + 780),]
teste <- bolsa_merenda_2[linha:linha + 780,]
teste <- bolsa_merenda_2[linha:(linha + 780),]
col <- bolsa_merenda %>%
select(duplicados)
col <- bolsa_merenda_2 %>%
select(duplicados)
col <- teste %>%
select(duplicados)
View(col)
col <- teste %>%
select(duplicados, Duplicidade)
View(col)
View(teste)
linha <- nrow(inicio_julho) + nrow(agosto) + 7879
teste <- bolsa_merenda_2[linha:(linha + 780),]
col <- teste %>%
select(duplicados, Duplicidade)
View(col)
linha <- nrow(inicio_julho) + nrow(agosto) + 7878
teste <- bolsa_merenda_2[linha:(linha + 780),]
col <- teste %>%
select(duplicados, Duplicidade)
View(col)
teste <- bolsa_merenda_2[linha:(linha + 780),]
col <- teste %>%
select(duplicados, Duplicidade)
View(col)
teste <- bolsa_merenda_2[linha:(linha + 781),]
col <- teste %>%
select(duplicados, Duplicidade)
teste <- bolsa_merenda_2[linha:(linha + 783),]
col <- teste %>%
select(duplicados, Duplicidade)
teste <- bolsa_merenda_2[linha:(linha + 781),]
col <- teste %>%
select(duplicados, Duplicidade)
col <- teste %>%
select(duplicados)
7879+782
7880 + 782
# Setembro
range_write("1YSdaqkeJhf4H1KVK5znxDTkCVfoQnvQLbWwqha6jeZw", sheet = 1, col, range = "Z7880:Z8662",
col_names = FALSE)
atual_setembro <- read_sheet("1YSdaqkeJhf4H1KVK5znxDTkCVfoQnvQLbWwqha6jeZw")
bolsa_merenda <- inicio_julho %>%
bind_rows(agosto) %>%
bind_rows(atual_setembro)
bolsa_merenda_2 <- bolsa_merenda %>%
mutate(duplicados_var = paste(`Nome do responsável familiar`, `Nome do aluno matriculado`),
duplicados = duplicated(duplicados_var),
duplicados = ifelse(duplicados == TRUE, "Sim", NA))
bolsa_merenda_2 %>%
count(duplicados, Duplicidade)
bolsa_merenda_2 <- bolsa_merenda %>%
mutate(duplicados_var = paste(`Nome do responsável familiar`, `Nome do aluno matriculado`, `E-mail de referência`),
duplicados = duplicated(duplicados_var),
duplicados = ifelse(duplicados == TRUE, "Sim", NA))
bolsa_merenda_2 %>%
count(duplicados, Duplicidade)
bolsa_merenda_2 <- bolsa_merenda %>%
mutate(duplicados_var = paste(`Nome do responsável familiar`, `Nome do aluno matriculado`),
duplicados = duplicated(duplicados_var),
duplicados = ifelse(duplicados == TRUE, "Sim", NA))
bolsa_merenda_2 %>%
count(duplicados, Duplicidade)
bolsa_merenda_2 <- bolsa_merenda %>%
mutate(duplicados_var = paste(`Nome do responsável familiar`, `Nome do aluno matriculado`, `E-mail de referência`),
duplicados = duplicated(duplicados_var),
duplicados = ifelse(duplicados == TRUE, "Sim", NA))
bolsa_merenda_2 %>%
count(duplicados, Duplicidade)
